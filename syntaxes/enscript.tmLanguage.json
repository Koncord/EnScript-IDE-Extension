{
	"information_for_contributors": [
		"This file has been converted from https://github.com/dotnet/csharp-tmLanguage/blob/master/grammars/csharp.tmLanguage",
		"If you want to provide a fix or improvement, please create a pull request against the original repository.",
		"Once accepted there, we are happy to receive an update request."
	],
	"version": "https://github.com/dotnet/csharp-tmLanguage/commit/1381bedfb087c18aca67af8278050d11bc9d9349",
    "name": "EnScript",
    "scopeName": "source.enscript",
    "fileTypes": ["c"],
	"patterns": [
		{
			"include": "#preprocessor"
		},
		{
			"include": "#comment"
		},
		{
			"include": "#directives"
		},
		{
			"include": "#declarations"
		},
		{
			"include": "#script-top-level"
		}
	],
	"repository": {
		"directives": {
			"patterns": [
				{
					"include": "#attribute-section"
				},
				{
					"include": "#punctuation-semicolon"
				}
			]
		},
		"declarations": {
			"patterns": [
				{
					"include": "#type-declarations"
				},
				{
					"include": "#punctuation-semicolon"
				}
			]
		},
		"script-top-level": {
			"patterns": [
				{
					"include": "#statement"
				},
				{
					"include": "#method-declaration"
				},
				{
					"include": "#punctuation-semicolon"
				}
			]
		},
		"type-declarations": {
			"patterns": [
				{
					"include": "#preprocessor"
				},
				{
					"include": "#comment"
				},
				{
					"include": "#storage-modifier"
				},
				{
					"include": "#class-declaration"
				},
				{
					"include": "#enum-declaration"
				},
				{
					"include": "#attribute-section"
				},
				{
					"include": "#punctuation-semicolon"
				}
			]
		},
		"class-members": {
			"patterns": [
				{
					"include": "#preprocessor"
				},
				{
					"include": "#comment"
				},
				{
					"include": "#storage-modifier"
				},
				{
					"include": "#type-declarations"
				},
				{
					"include": "#field-declaration"
				},
				{
					"include": "#event-declaration"
				},
				{
					"include": "#indexer-declaration"
				},
				{
					"include": "#variable-initializer"
				},
				{
					"include": "#constructor-declaration"
				},
				{
					"include": "#destructor-declaration"
				},
				{
					"include": "#operator-declaration"
				},
				{
					"include": "#method-declaration"
				},
				{
					"include": "#attribute-section"
				},
				{
					"include": "#punctuation-semicolon"
				}
			]
		},
		"statement": {
			"patterns": [
				{
					"include": "#preprocessor"
				},
				{
					"include": "#comment"
				},
				{
					"include": "#while-statement"
				},
				{
					"include": "#do-statement"
				},
				{
					"include": "#for-statement"
				},
				{
					"include": "#foreach-statement"
				},
				{
					"include": "#if-statement"
				},
				{
					"include": "#else-part"
				},
				{
					"include": "#return-statement"
				},
				{
					"include": "#break-or-continue-statement"
				},
				{
					"include": "#expression-operator-expression"
				},
				{
					"include": "#object-creation-expression"
				},
				{
					"include": "#array-creation-expression"
				},
				{
					"include": "#local-declaration"
				},
				{
					"include": "#block"
				},
				{
					"include": "#expression"
				},
				{
					"include": "#punctuation-semicolon"
				}
			]
		},
		"expression": {
			"patterns": [
				{
					"include": "#preprocessor"
				},
				{
					"include": "#comment"
				},
				{
					"include": "#expression-operator-expression"
				},
				{
					"include": "#type-operator-expression"
				},
				{
					"include": "#default-literal-expression"
				},
				{
					"include": "#raw-interpolated-string"
				},
				{
					"include": "#interpolated-string"
				},
				{
					"include": "#verbatim-interpolated-string"
				},
				{
					"include": "#type-builtin"
				},
				{
					"include": "#language-variable"
				},
				{
					"include": "#switch-statement-or-expression"
				},
				{
					"include": "#conditional-operator"
				},
				{
					"include": "#assignment-expression"
				},
				{
					"include": "#expression-operators"
				},
				{
					"include": "#object-creation-expression"
				},
				{
					"include": "#array-creation-expression"
				},
				{
					"include": "#invocation-expression"
				},
				{
					"include": "#member-access-expression"
				},
				{
					"include": "#element-access-expression"
				},
				{
					"include": "#cast-expression"
				},
				{
					"include": "#literal"
				},
				{
					"include": "#parenthesized-expression"
				},
				{
					"include": "#initializer-expression"
				},
				{
					"include": "#identifier"
				}
			]
		},
		"attribute-section": {
			"begin": "(\\[)(assembly|module|field|event|method|param|return|type)?(\\:)?",
			"beginCaptures": {
				"1": {
					"name": "punctuation.squarebracket.open.cs"
				},
				"2": {
					"name": "keyword.other.attribute-specifier.cs"
				},
				"3": {
					"name": "punctuation.separator.colon.cs"
				}
			},
			"end": "(\\])",
			"endCaptures": {
				"1": {
					"name": "punctuation.squarebracket.close.cs"
				}
			},
			"patterns": [
				{
					"include": "#comment"
				},
				{
					"include": "#attribute"
				},
				{
					"include": "#punctuation-comma"
				}
			]
		},
		"attribute": {
			"patterns": [
				{
					"include": "#type-name"
				},
				{
					"include": "#type-arguments"
				},
				{
					"include": "#attribute-arguments"
				}
			]
		},
		"attribute-arguments": {
			"begin": "(\\()",
			"beginCaptures": {
				"1": {
					"name": "punctuation.parenthesis.open.cs"
				}
			},
			"end": "(\\))",
			"endCaptures": {
				"1": {
					"name": "punctuation.parenthesis.close.cs"
				}
			},
			"patterns": [
				{
					"include": "#attribute-named-argument"
				},
				{
					"include": "#expression"
				},
				{
					"include": "#punctuation-comma"
				}
			]
		},
		"attribute-named-argument": {
			"begin": "(@?[_[:alpha:]][_[:alnum:]]*)\\s*(?==)",
			"beginCaptures": {
				"1": {
					"name": "entity.name.variable.property.cs"
				}
			},
			"end": "(?=(,|\\)))",
			"patterns": [
				{
					"include": "#operator-assignment"
				},
				{
					"include": "#expression"
				}
			]
		},
		"storage-modifier": {
			"name": "storage.modifier.$1.cs",
			"match": "(?<!\\.)\\b(proto|owned|new|public|protected|internal|private|modded|local|notnull|event|virtual|native|override|sealed|static|readonly|volatile|const|extern|external|ref|file|autoptr)\\b"
		},
		"class-declaration": {
			"begin": "(?=(\\brecord\\b\\s+)?\\bclass\\b)",
			"end": "(?<=\\})|(?=;)",
			"patterns": [
				{
					"begin": "(?x)\n(\\b(record)\\b\\s+)?\n\\b(class)\\b\\s+\n(@?[_[:alpha:]][_[:alnum:]]*)\\s*",
					"beginCaptures": {
						"2": {
							"name": "storage.type.record.cs"
						},
						"3": {
							"name": "storage.type.class.cs"
						},
						"4": {
							"name": "entity.name.type.class.cs"
						}
					},
					"end": "(?=\\{)|(?=;)",
					"patterns": [
						{
							"include": "#comment"
						},
						{
							"include": "#type-parameter-list"
						},
						{
							"include": "#parenthesized-parameter-list"
						},
						{
							"include": "#base-types"
						},
						{
							"include": "#generic-constraints"
						}
					]
				},
				{
					"begin": "\\{",
					"beginCaptures": {
						"0": {
							"name": "punctuation.curlybrace.open.cs"
						}
					},
					"end": "\\}",
					"endCaptures": {
						"0": {
							"name": "punctuation.curlybrace.close.cs"
						}
					},
					"patterns": [
						{
							"include": "#class-members"
						}
					]
				},
				{
					"include": "#preprocessor"
				},
				{
					"include": "#comment"
				}
			]
		},
		"enum-declaration": {
			"begin": "(?=\\benum\\b)",
			"end": "(?<=\\})|(?=;)",
			"patterns": [
				{
					"begin": "(?=enum)",
					"end": "(?=\\{)|(?=;)",
					"patterns": [
						{
							"include": "#comment"
						},
						{
							"match": "(enum)\\s+(@?[_[:alpha:]][_[:alnum:]]*)",
							"captures": {
								"1": {
									"name": "storage.type.enum.cs"
								},
								"2": {
									"name": "entity.name.type.enum.cs"
								}
							}
						},
						{
							"begin": ":",
							"beginCaptures": {
								"0": {
									"name": "punctuation.separator.colon.cs"
								}
							},
							"end": "(?=\\{)",
							"patterns": [
								{
									"include": "#type"
								}
							]
						}
					]
				},
				{
					"begin": "\\{",
					"beginCaptures": {
						"0": {
							"name": "punctuation.curlybrace.open.cs"
						}
					},
					"end": "\\}",
					"endCaptures": {
						"0": {
							"name": "punctuation.curlybrace.close.cs"
						}
					},
					"patterns": [
						{
							"include": "#preprocessor"
						},
						{
							"include": "#comment"
						},
						{
							"include": "#attribute-section"
						},
						{
							"include": "#punctuation-comma"
						},
						{
							"begin": "@?[_[:alpha:]][_[:alnum:]]*",
							"beginCaptures": {
								"0": {
									"name": "entity.name.variable.enum-member.cs"
								}
							},
							"end": "(?=(,|\\}))",
							"patterns": [
								{
									"include": "#comment"
								},
								{
									"include": "#variable-initializer"
								}
							]
						}
					]
				},
				{
					"include": "#preprocessor"
				},
				{
					"include": "#comment"
				}
			]
		},
		"type-parameter-list": {
			"begin": "\\<",
			"beginCaptures": {
				"0": {
					"name": "punctuation.definition.typeparameters.begin.cs"
				}
			},
			"end": "\\>",
			"endCaptures": {
				"0": {
					"name": "punctuation.definition.typeparameters.end.cs"
				}
			},
			"patterns": [
				{
					"match": "\\b(in|out)\\b",
					"name": "storage.modifier.$1.cs"
				},
				{
					"match": "(@?[_[:alpha:]][_[:alnum:]]*)\\b",
					"name": "entity.name.type.type-parameter.cs"
				},
				{
					"include": "#comment"
				},
				{
					"include": "#punctuation-comma"
				},
				{
					"include": "#attribute-section"
				}
			]
		},
		"base-types": {
            "begin": "(?i)\\b(extends)\\b|(:)",
            "beginCaptures": {
                "1": {
                    "name": "keyword.other.extends.cs"
                },
                "2": {
                    "name": "punctuation.separator.colon.cs"
                }
            },
            "end": "(?=\\{|where|;)",
            "patterns": [
                {
                    "include": "#type"
                },
                {
                    "include": "#punctuation-comma"
                },
                {
                    "include": "#preprocessor"
                }
            ]
        },
		"generic-constraints": {
			"begin": "(where)\\s+(@?[_[:alpha:]][_[:alnum:]]*)\\s*(:)",
			"beginCaptures": {
				"1": {
					"name": "storage.modifier.where.cs"
				},
				"2": {
					"name": "entity.name.type.type-parameter.cs"
				},
				"3": {
					"name": "punctuation.separator.colon.cs"
				}
			},
			"end": "(?=\\{|where|;|=>)",
			"patterns": [
				{
					"name": "storage.type.class.cs",
					"match": "\\bclass\\b"
				},
				{
					"name": "keyword.other.constraint.default.cs",
					"match": "\\bdefault\\b"
				},
				{
					"name": "keyword.other.constraint.notnull.cs",
					"match": "\\bnotnull\\b"
				},
				{
					"name": "keyword.other.constraint.unmanaged.cs",
					"match": "\\bunmanaged\\b"
				},
				{
					"match": "(new)\\s*(\\()\\s*(\\))",
					"captures": {
						"1": {
							"name": "keyword.operator.expression.new.cs"
						},
						"2": {
							"name": "punctuation.parenthesis.open.cs"
						},
						"3": {
							"name": "punctuation.parenthesis.close.cs"
						}
					}
				},
				{
					"include": "#type"
				},
				{
					"include": "#punctuation-comma"
				},
				{
					"include": "#generic-constraints"
				}
			]
		},
		"field-declaration": {
			"begin": "(?x)\n(?<type_name>\n  (?:\n    (?:\n      (?:(?<identifier>@?[_[:alpha:]][_[:alnum:]]*)\\s*\\:\\:\\s*)? # alias-qualification\n      (?<name_and_type_args> # identifier + type arguments (if any)\n        \\g<identifier>\\s*\n        (?<type_args>\\s*<(?:[^<>]|\\g<type_args>)+>\\s*)?\n      )\n      (?:\\s*\\.\\s*\\g<name_and_type_args>)* | # Are there any more names being dotted into?\n      (?<tuple>\\s*\\((?:[^\\(\\)]|\\g<tuple>)+\\))\n    )\n    (?:\\s*\\?\\s*)? # nullable suffix?\n    (?:\\s* # array suffix?\n      \\[\n        (?:\\s*,\\s*)* # commata for multi-dimensional arrays\n      \\]\n      \\s*\n      (?:\\?)? # arrays can be nullable reference types\n      \\s*\n    )*\n  )\n)\\s+\n(\\g<identifier>)\\s* # first field name\n(?!=>|==)(?=,|;|=|$)",
			"beginCaptures": {
				"1": {
					"patterns": [
						{
							"include": "#type"
						}
					]
				},
				"6": {
					"name": "entity.name.variable.field.cs"
				}
			},
			"end": "(?=;)",
			"patterns": [
				{
					"name": "entity.name.variable.field.cs",
					"match": "@?[_[:alpha:]][_[:alnum:]]*"
				},
				{
					"include": "#punctuation-comma"
				},
				{
					"include": "#comment"
				},
				{
					"include": "#variable-initializer"
				},
				{
					"include": "#class-members"
				}
			]
		},
		"indexer-declaration": {
			"begin": "(?x)\n(?<return_type>\n  (?<type_name>\n    (?:\n      (?:ref\\s+(?:readonly\\s+)?)?   # ref return\n      (?:\n        (?:(?<identifier>@?[_[:alpha:]][_[:alnum:]]*)\\s*\\:\\:\\s*)? # alias-qualification\n        (?<name_and_type_args> # identifier + type arguments (if any)\n          \\g<identifier>\\s*\n          (?<type_args>\\s*<(?:[^<>]|\\g<type_args>)+>\\s*)?\n        )\n        (?:\\s*\\.\\s*\\g<name_and_type_args>)* | # Are there any more names being dotted into?\n        (?<tuple>\\s*\\((?:[^\\(\\)]|\\g<tuple>)+\\))\n      )\n      (?:\\s*\\?\\s*)? # nullable suffix?\n      (?:\\s* # array suffix?\n        \\[\n          (?:\\s*,\\s*)* # commata for multi-dimensional arrays\n        \\]\n        \\s*\n        (?:\\?)? # arrays can be nullable reference types\n        \\s*\n      )*\n    )\n  )\\s+\n)\n(?<interface_name>\\g<type_name>\\s*\\.\\s*)?\n(?<indexer_name>this)\\s*\n(?=\\[)",
			"beginCaptures": {
				"1": {
					"patterns": [
						{
							"include": "#type"
						}
					]
				},
				"7": {
					"patterns": [
						{
							"include": "#type"
						},
						{
							"include": "#punctuation-accessor"
						}
					]
				},
				"8": {
					"name": "variable.language.this.cs"
				}
			},
			"end": "(?<=\\})|(?=;)",
			"patterns": [
				{
					"include": "#comment"
				},
				{
					"include": "#bracketed-parameter-list"
				},
				{
					"include": "#accessor-getter-expression"
				},
				{
					"include": "#variable-initializer"
				}
			]
		},
		"event-declaration": {
			"begin": "(?x)\n\\b(event)\\b\\s*\n(?<return_type>\n  (?<type_name>\n    (?:\n      (?:\n        (?:(?<identifier>@?[_[:alpha:]][_[:alnum:]]*)\\s*\\:\\:\\s*)? # alias-qualification\n        (?<name_and_type_args> # identifier + type arguments (if any)\n          \\g<identifier>\\s*\n          (?<type_args>\\s*<(?:[^<>]|\\g<type_args>)+>\\s*)?\n        )\n        (?:\\s*\\.\\s*\\g<name_and_type_args>)* | # Are there any more names being dotted into?\n        (?<tuple>\\s*\\((?:[^\\(\\)]|\\g<tuple>)+\\))\n      )\n      (?:\\s*\\?\\s*)? # nullable suffix?\n      (?:\\s* # array suffix?\n        \\[\n          (?:\\s*,\\s*)* # commata for multi-dimensional arrays\n        \\]\n        \\s*\n        (?:\\?)? # arrays can be nullable reference types\n        \\s*\n      )*\n    )\n  )\\s+\n)\n(?<interface_name>\\g<type_name>\\s*\\.\\s*)?\n(\\g<identifier>)\\s* # first event name\n(?=\\{|;|,|=|//|/\\*|$)",
			"beginCaptures": {
				"1": {
					"name": "storage.type.event.cs"
				},
				"2": {
					"patterns": [
						{
							"include": "#type"
						}
					]
				},
				"8": {
					"patterns": [
						{
							"include": "#type"
						},
						{
							"include": "#punctuation-accessor"
						}
					]
				},
				"9": {
					"name": "entity.name.variable.event.cs"
				}
			},
			"end": "(?<=\\})|(?=;)",
			"patterns": [
				{
					"include": "#comment"
				},
				{
					"include": "#event-accessors"
				},
				{
					"name": "entity.name.variable.event.cs",
					"match": "@?[_[:alpha:]][_[:alnum:]]*"
				},
				{
					"include": "#punctuation-comma"
				},
				{
					"begin": "=",
					"beginCaptures": {
						"0": {
							"name": "keyword.operator.assignment.cs"
						}
					},
					"end": "(?<=,)|(?=;)",
					"patterns": [
						{
							"include": "#expression"
						},
						{
							"include": "#punctuation-comma"
						}
					]
				}
			]
		},
		"event-accessors": {
			"begin": "\\{",
			"beginCaptures": {
				"0": {
					"name": "punctuation.curlybrace.open.cs"
				}
			},
			"end": "\\}",
			"endCaptures": {
				"0": {
					"name": "punctuation.curlybrace.close.cs"
				}
			},
			"patterns": [
				{
					"include": "#comment"
				},
				{
					"include": "#attribute-section"
				},
				{
					"begin": "\\b(add|remove)\\b\\s*(?=\\{|;|=>|//|/\\*|$)",
					"beginCaptures": {
						"1": {
							"name": "storage.type.accessor.$1.cs"
						}
					},
					"end": "(?<=\\}|;)|(?=\\})",
					"patterns": [
						{
							"include": "#accessor-setter"
						}
					]
				}
			]
		},
		"accessor-getter": {
			"patterns": [
				{
					"begin": "\\{",
					"beginCaptures": {
						"0": {
							"name": "punctuation.curlybrace.open.cs"
						}
					},
					"end": "\\}",
					"endCaptures": {
						"0": {
							"name": "punctuation.curlybrace.close.cs"
						}
					},
					"contentName": "meta.accessor.getter.cs",
					"patterns": [
						{
							"include": "#statement"
						}
					]
				},
				{
					"include": "#accessor-getter-expression"
				},
				{
					"include": "#punctuation-semicolon"
				}
			]
		},
		"accessor-getter-expression": {
			"begin": "=>",
			"beginCaptures": {
				"0": {
					"name": "keyword.operator.arrow.cs"
				}
			},
			"end": "(?=;|\\})",
			"contentName": "meta.accessor.getter.cs",
			"patterns": [
				{
					"include": "#ref-modifier"
				},
				{
					"include": "#expression"
				}
			]
		},
		"accessor-setter": {
			"patterns": [
				{
					"begin": "\\{",
					"beginCaptures": {
						"0": {
							"name": "punctuation.curlybrace.open.cs"
						}
					},
					"end": "\\}",
					"endCaptures": {
						"0": {
							"name": "punctuation.curlybrace.close.cs"
						}
					},
					"contentName": "meta.accessor.setter.cs",
					"patterns": [
						{
							"include": "#statement"
						}
					]
				},
				{
					"begin": "=>",
					"beginCaptures": {
						"0": {
							"name": "keyword.operator.arrow.cs"
						}
					},
					"end": "(?=;|\\})",
					"contentName": "meta.accessor.setter.cs",
					"patterns": [
						{
							"include": "#ref-modifier"
						},
						{
							"include": "#expression"
						}
					]
				},
				{
					"include": "#punctuation-semicolon"
				}
			]
		},
		"method-declaration": {
			"begin": "(?x)\n(?<return_type>\n  (?<type_name>\n    (?:\n      (?:ref\\s+(?:readonly\\s+)?)?   # ref return\n      (?:\n        (?:(?<identifier>@?[_[:alpha:]][_[:alnum:]]*)\\s*\\:\\:\\s*)? # alias-qualification\n        (?<name_and_type_args> # identifier + type arguments (if any)\n          \\g<identifier>\\s*\n          (?<type_args>\\s*<(?:[^<>]|\\g<type_args>)+>\\s*)?\n        )\n        (?:\\s*\\.\\s*\\g<name_and_type_args>)* | # Are there any more names being dotted into?\n        (?<tuple>\\s*\\((?:[^\\(\\)]|\\g<tuple>)+\\))\n      )\n      (?:\\s*\\?\\s*)? # nullable suffix?\n      (?:\\s* # array suffix?\n        \\[\n          (?:\\s*,\\s*)* # commata for multi-dimensional arrays\n        \\]\n        \\s*\n        (?:\\?)? # arrays can be nullable reference types\n        \\s*\n      )*\n    )\n  )\\s+\n)\n(?<interface_name>\\g<type_name>\\s*\\.\\s*)?\n(\\g<identifier>)\\s*\n(<([^<>]+)>)?\\s*\n(?=\\()",
			"beginCaptures": {
				"1": {
					"patterns": [
						{
							"include": "#type"
						}
					]
				},
				"7": {
					"patterns": [
						{
							"include": "#type"
						},
						{
							"include": "#punctuation-accessor"
						}
					]
				},
				"8": {
					"name": "entity.name.function.cs"
				},
				"9": {
					"patterns": [
						{
							"include": "#type-parameter-list"
						}
					]
				}
			},
			"end": "(?<=\\})|(?=;)",
			"patterns": [
				{
					"include": "#comment"
				},
				{
					"include": "#parenthesized-parameter-list"
				},
				{
					"include": "#generic-constraints"
				},
				{
					"include": "#expression-body"
				},
				{
					"include": "#block"
				}
			]
		},
		"constructor-declaration": {
			"begin": "(?=@?[_[:alpha:]][_[:alnum:]]*\\s*\\()",
			"end": "(?<=\\})|(?=;)",
			"patterns": [
				{
					"match": "(@?[_[:alpha:]][_[:alnum:]]*)\\b",
					"captures": {
						"1": {
							"name": "entity.name.function.cs"
						}
					}
				},
				{
					"begin": "(:)",
					"beginCaptures": {
						"1": {
							"name": "punctuation.separator.colon.cs"
						}
					},
					"end": "(?=\\{|=>)",
					"patterns": [
						{
							"include": "#constructor-initializer"
						}
					]
				},
				{
					"include": "#parenthesized-parameter-list"
				},
				{
					"include": "#preprocessor"
				},
				{
					"include": "#comment"
				},
				{
					"include": "#expression-body"
				},
				{
					"include": "#block"
				}
			]
		},
		"constructor-initializer": {
			"begin": "\\b(base|this)\\b\\s*(?=\\()",
			"beginCaptures": {
				"1": {
					"name": "variable.language.$1.cs"
				}
			},
			"end": "(?<=\\))",
			"patterns": [
				{
					"include": "#argument-list"
				}
			]
		},
		"destructor-declaration": {
			"begin": "(~)(@?[_[:alpha:]][_[:alnum:]]*)\\s*(?=\\()",
			"beginCaptures": {
				"1": {
					"name": "punctuation.tilde.cs"
				},
				"2": {
					"name": "entity.name.function.cs"
				}
			},
			"end": "(?<=\\})|(?=;)",
			"patterns": [
				{
					"include": "#comment"
				},
				{
					"include": "#parenthesized-parameter-list"
				},
				{
					"include": "#expression-body"
				},
				{
					"include": "#block"
				}
			]
		},
		"operator-declaration": {
			"begin": "(?x)\n(?<type_name>\n  (?:\n    (?:ref\\s+(?:readonly\\s+)?)?   # ref return\n    (?:\n      (?:(?<identifier>@?[_[:alpha:]][_[:alnum:]]*)\\s*\\:\\:\\s*)? # alias-qualification\n      (?<name_and_type_args> # identifier + type arguments (if any)\n        \\g<identifier>\\s*\n        (?<type_args>\\s*<(?:[^<>]|\\g<type_args>)+>\\s*)?\n      )\n      (?:\\s*\\.\\s*\\g<name_and_type_args>)* | # Are there any more names being dotted into?\n      (?<tuple>\\s*\\((?:[^\\(\\)]|\\g<tuple>)+\\))\n    )\n    (?:\\s*\\?\\s*)? # nullable suffix?\n    (?:\\s* # array suffix?\n      \\[\n        (?:\\s*,\\s*)* # commata for multi-dimensional arrays\n      \\]\n      \\s*\n      (?:\\?)? # arrays can be nullable reference types\n      \\s*\n    )*\n  )\n)\\s*\n\\b(?<operator_keyword>operator)\\b\\s*\n(?<operator>[+\\-*/%&|\\^!=~<>]+|true|false)\\s*\n(?=\\()",
			"beginCaptures": {
				"1": {
					"patterns": [
						{
							"include": "#type"
						}
					]
				},
				"6": {
					"name": "storage.type.operator.cs"
				},
				"7": {
					"name": "entity.name.function.cs"
				}
			},
			"end": "(?<=\\})|(?=;)",
			"patterns": [
				{
					"include": "#comment"
				},
				{
					"include": "#parenthesized-parameter-list"
				},
				{
					"include": "#expression-body"
				},
				{
					"include": "#block"
				}
			]
		},
		"block": {
			"begin": "\\{",
			"beginCaptures": {
				"0": {
					"name": "punctuation.curlybrace.open.cs"
				}
			},
			"end": "\\}",
			"endCaptures": {
				"0": {
					"name": "punctuation.curlybrace.close.cs"
				}
			},
			"patterns": [
				{
					"include": "#statement"
				}
			]
		},
		"variable-initializer": {
			"begin": "(?<!=|!)(=)(?!=|>)",
			"beginCaptures": {
				"1": {
					"name": "keyword.operator.assignment.cs"
				}
			},
			"end": "(?=[,\\)\\];}])",
			"patterns": [
				{
					"include": "#ref-modifier"
				},
				{
					"include": "#expression"
				}
			]
		},
		"expression-body": {
			"begin": "=>",
			"beginCaptures": {
				"0": {
					"name": "keyword.operator.arrow.cs"
				}
			},
			"end": "(?=[,\\);}])",
			"patterns": [
				{
					"include": "#ref-modifier"
				},
				{
					"include": "#expression"
				}
			]
		},
		"return-statement": {
			"begin": "(?<!\\.)\\b(return)\\b",
			"beginCaptures": {
				"1": {
					"name": "keyword.control.flow.return.cs"
				}
			},
			"end": "(?=[;}])",
			"patterns": [
				{
					"include": "#ref-modifier"
				},
				{
					"include": "#expression"
				}
			]
		},
		"break-or-continue-statement": {
			"match": "(?<!\\.)\\b(break|continue)\\b",
			"name": "keyword.control.flow.$1.cs"
		},
		"if-statement": {
			"begin": "(?<!\\.)\\b(if)\\b\\s*(?=\\()",
			"beginCaptures": {
				"1": {
					"name": "keyword.control.conditional.if.cs"
				}
			},
			"end": "(?<=})|(?=;)",
			"patterns": [
				{
					"begin": "\\(",
					"beginCaptures": {
						"0": {
							"name": "punctuation.parenthesis.open.cs"
						}
					},
					"end": "\\)",
					"endCaptures": {
						"0": {
							"name": "punctuation.parenthesis.close.cs"
						}
					},
					"patterns": [
						{
							"include": "#expression"
						}
					]
				},
				{
					"include": "#statement"
				}
			]
		},
		"else-part": {
			"begin": "(?<!\\.)\\b(else)\\b",
			"beginCaptures": {
				"1": {
					"name": "keyword.control.conditional.else.cs"
				}
			},
			"end": "(?<=})|(?=;)",
			"patterns": [
				{
					"include": "#statement"
				}
			]
		},
		"switch-statement-or-expression": {
			"begin": "(?<!\\.)\\b(switch)\\b",
			"beginCaptures": {
				"1": {
					"name": "keyword.control.conditional.switch.cs"
				}
			},
			"end": "(?<=})|(?=})",
			"patterns": [
				{
					"include": "#intrusive"
				},
				{
					"begin": "(?=\\()",
					"end": "(?<=\\})|(?=\\})",
					"patterns": [
						{
							"include": "#switch-statement"
						}
					]
				},
				{
					"begin": "(?=\\{)",
					"end": "(?<=\\})|(?=\\})",
					"patterns": [
						{
							"include": "#switch-expression"
						}
					]
				}
			]
		},
		"switch-statement": {
			"patterns": [
				{
					"include": "#intrusive"
				},
				{
					"begin": "\\(",
					"beginCaptures": {
						"0": {
							"name": "punctuation.parenthesis.open.cs"
						}
					},
					"end": "\\)",
					"endCaptures": {
						"0": {
							"name": "punctuation.parenthesis.close.cs"
						}
					},
					"patterns": [
						{
							"include": "#expression"
						}
					]
				},
				{
					"begin": "\\{",
					"beginCaptures": {
						"0": {
							"name": "punctuation.curlybrace.open.cs"
						}
					},
					"end": "\\}",
					"endCaptures": {
						"0": {
							"name": "punctuation.curlybrace.close.cs"
						}
					},
					"patterns": [
						{
							"include": "#switch-label"
						},
						{
							"include": "#statement"
						}
					]
				}
			]
		},
		"switch-label": {
			"begin": "\\b(case|default)\\b",
			"beginCaptures": {
				"1": {
					"name": "keyword.control.conditional.$1.cs"
				}
			},
			"end": "(:)|(?=})",
			"endCaptures": {
				"1": {
					"name": "punctuation.separator.colon.cs"
				}
			}
		},
		"switch-expression": {
			"begin": "\\{",
			"beginCaptures": {
				"0": {
					"name": "punctuation.curlybrace.open.cs"
				}
			},
			"end": "\\}",
			"endCaptures": {
				"0": {
					"name": "punctuation.curlybrace.close.cs"
				}
			},
			"patterns": [
				{
					"include": "#punctuation-comma"
				},
				{
					"begin": "=>",
					"beginCaptures": {
						"0": {
							"name": "keyword.operator.arrow.cs"
						}
					},
					"end": "(?=,|})",
					"patterns": [
						{
							"include": "#expression"
						}
					]
				}
			]
		},
		"pattern": {
			"patterns": [
				{
					"include": "#intrusive"
				},
				{
					"include": "#combinator-pattern"
				},
				{
					"include": "#discard-pattern"
				},
				{
					"include": "#constant-pattern"
				},
				{
					"include": "#relational-pattern"
				},
				{
					"include": "#var-pattern"
				},
				{
					"include": "#type-pattern"
				},
				{
					"include": "#positional-pattern"
				},
				{
					"include": "#list-pattern"
				},
				{
					"include": "#slice-pattern"
				}
			]
		},
		"combinator-pattern": {
			"match": "\\b(and|or|not)\\b",
			"name": "keyword.operator.expression.pattern.combinator.$1.cs"
		},
		"discard-pattern": {
			"match": "_(?![_[:alnum:]])",
			"name": "variable.language.discard.cs"
		},
		"constant-pattern": {
			"patterns": [
				{
					"include": "#boolean-literal"
				},
				{
					"include": "#null-literal"
				},
				{
					"include": "#numeric-literal"
				},
				{
					"include": "#char-literal"
				},
				{
					"include": "#string-literal"
				},
				{
					"include": "#raw-string-literal"
				},
				{
					"include": "#verbatim-string-literal"
				},
				{
					"include": "#type-operator-expression"
				},
				{
					"include": "#expression-operator-expression"
				},
				{
					"include": "#expression-operators"
				},
				{
					"include": "#casted-constant-pattern"
				}
			]
		},
		"casted-constant-pattern": {
			"begin": "(?x)\n(\\()\n  ([\\s.:@_[:alnum:]]+)\n(\\))\n(?=[\\s+\\-!~]*@?[_[:alnum:]('\"]+)",
			"beginCaptures": {
				"1": {
					"name": "punctuation.parenthesis.open.cs"
				},
				"2": {
					"patterns": [
						{
							"include": "#type-builtin"
						},
						{
							"include": "#type-name"
						}
					]
				},
				"3": {
					"name": "punctuation.parenthesis.close.cs"
				}
			},
			"end": "(?=[)}\\],;:?=&|^]|!=|\\b(and|or)\\b)",
			"patterns": [
				{
					"include": "#casted-constant-pattern"
				},
				{
					"begin": "\\(",
					"beginCaptures": {
						"0": {
							"name": "punctuation.parenthesis.open.cs"
						}
					},
					"end": "\\)",
					"endCaptures": {
						"0": {
							"name": "punctuation.parenthesis.close.cs"
						}
					},
					"patterns": [
						{
							"include": "#constant-pattern"
						}
					]
				},
				{
					"include": "#constant-pattern"
				},
				{
					"match": "(@?[_[:alpha:]][_[:alnum:]]*)\\s*(\\:\\:)",
					"captures": {
						"1": {
							"name": "entity.name.type.alias.cs"
						},
						"2": {
							"name": "punctuation.separator.coloncolon.cs"
						}
					}
				},
				{
					"match": "(@?[_[:alpha:]][_[:alnum:]]*)\\s*(\\.)",
					"captures": {
						"1": {
							"name": "entity.name.type.cs"
						},
						"2": {
							"name": "punctuation.accessor.cs"
						}
					}
				},
				{
					"match": "\\@?[_[:alpha:]][_[:alnum:]]*",
					"name": "variable.other.constant.cs"
				}
			]
		},
		"relational-pattern": {
			"begin": "<=?|>=?",
			"beginCaptures": {
				"0": {
					"name": "keyword.operator.relational.cs"
				}
			},
			"end": "(?=[)}\\],;:?=&|^]|!=|\\b(and|or)\\b)",
			"patterns": [
				{
					"include": "#expression"
				}
			]
		},
		"var-pattern": {
			"begin": "\\b(auto|autoptr)\\b",
			"beginCaptures": {
				"1": {
					"name": "storage.type.var.cs"
				}
			},
			"end": "(?=[)}\\],;:?=&|^]|!=|\\b(and|or)\\b)",
			"patterns": [
				{
					"include": "#designation-pattern"
				}
			]
		},
		"designation-pattern": {
			"patterns": [
				{
					"include": "#intrusive"
				},
				{
					"begin": "\\(",
					"beginCaptures": {
						"0": {
							"name": "punctuation.parenthesis.open.cs"
						}
					},
					"end": "\\)",
					"endCaptures": {
						"0": {
							"name": "punctuation.parenthesis.close.cs"
						}
					},
					"patterns": [
						{
							"include": "#punctuation-comma"
						},
						{
							"include": "#designation-pattern"
						}
					]
				},
				{
					"include": "#simple-designation-pattern"
				}
			]
		},
		"simple-designation-pattern": {
			"patterns": [
				{
					"include": "#discard-pattern"
				},
				{
					"match": "@?[_[:alpha:]][_[:alnum:]]*",
					"name": "entity.name.variable.local.cs"
				}
			]
		},
		"type-pattern": {
			"begin": "(?=@?[_[:alpha:]][_[:alnum:]]*)",
			"end": "(?=[)}\\],;:?=&|^]|!=|\\b(and|or)\\b)",
			"patterns": [
				{
					"begin": "\\G",
					"end": "(?!\\G[@_[:alpha:]])(?=[\\({@_[:alpha:])}\\],;:=&|^]|(?:\\s|^)\\?|!=|\\b(and|or)\\b)",
					"patterns": [
						{
							"include": "#intrusive"
						},
						{
							"include": "#type-subpattern"
						}
					]
				},
				{
					"begin": "(?=[\\({@_[:alpha:]])",
					"end": "(?=[)}\\],;:?=&|^]|!=|\\b(and|or)\\b)",
					"patterns": [
						{
							"include": "#intrusive"
						},
						{
							"include": "#positional-pattern"
						},
						{
							"include": "#simple-designation-pattern"
						}
					]
				}
			]
		},
		"type-subpattern": {
			"patterns": [
				{
					"include": "#type-builtin"
				},
				{
					"begin": "(@?[_[:alpha:]][_[:alnum:]]*)\\s*(::)",
					"beginCaptures": {
						"1": {
							"name": "entity.name.type.alias.cs"
						},
						"2": {
							"name": "punctuation.separator.coloncolon.cs"
						}
					},
					"end": "(?<=[_[:alnum:]])|(?=[.<\\[\\({)}\\],;:?=&|^]|!=|\\b(and|or)\\b)",
					"patterns": [
						{
							"include": "#intrusive"
						},
						{
							"match": "\\@?[_[:alpha:]][_[:alnum:]]*",
							"name": "entity.name.type.cs"
						}
					]
				},
				{
					"match": "\\@?[_[:alpha:]][_[:alnum:]]*",
					"name": "entity.name.type.cs"
				},
				{
					"begin": "\\.",
					"beginCaptures": {
						"0": {
							"name": "punctuation.accessor.cs"
						}
					},
					"end": "(?<=[_[:alnum:]])|(?=[<\\[\\({)}\\],;:?=&|^]|!=|\\b(and|or)\\b)",
					"patterns": [
						{
							"include": "#intrusive"
						},
						{
							"match": "\\@?[_[:alpha:]][_[:alnum:]]*",
							"name": "entity.name.type.cs"
						}
					]
				},
				{
					"include": "#type-arguments"
				},
				{
					"include": "#type-array-suffix"
				},
				{
					"match": "(?<!\\s)\\?",
					"name": "punctuation.separator.question-mark.cs"
				}
			]
		},
		"positional-pattern": {
			"begin": "(?=\\()",
			"end": "(?=[)}\\],;:?=&|^]|!=|\\b(and|or)\\b)",
			"patterns": [
				{
					"begin": "\\(",
					"beginCaptures": {
						"0": {
							"name": "punctuation.parenthesis.open.cs"
						}
					},
					"end": "\\)",
					"endCaptures": {
						"0": {
							"name": "punctuation.parenthesis.close.cs"
						}
					},
					"patterns": [
						{
							"include": "#subpattern"
						},
						{
							"include": "#punctuation-comma"
						}
					]
				},
				{
					"begin": "(?<=\\))",
					"end": "(?=[)}\\],;:?=&|^]|!=|\\b(and|or)\\b)",
					"patterns": [
						{
							"include": "#intrusive"
						},
						{
							"include": "#simple-designation-pattern"
						}
					]
				}
			]
		},
		"subpattern": {
			"patterns": [
				{
					"match": "(@?[_[:alpha:]][_[:alnum:]]*(?:\\s*\\.\\s*@?[_[:alpha:]][_[:alnum:]]*)*)\\s*(:)",
					"captures": {
						"1": {
							"patterns": [
								{
									"match": "\\@?[_[:alpha:]][_[:alnum:]]*",
									"name": "variable.other.object.property.cs"
								},
								{
									"include": "#punctuation-accessor"
								}
							]
						},
						"2": {
							"name": "punctuation.separator.colon.cs"
						}
					}
				},
				{
					"include": "#pattern"
				}
			]
		},
		"list-pattern": {
			"begin": "(?=\\[)",
			"end": "(?=[)}\\],;:?=&|^]|!=|\\b(and|or)\\b)",
			"patterns": [
				{
					"begin": "\\[",
					"beginCaptures": {
						"0": {
							"name": "punctuation.squarebracket.open.cs"
						}
					},
					"end": "\\]",
					"endCaptures": {
						"0": {
							"name": "punctuation.squarebracket.close.cs"
						}
					},
					"patterns": [
						{
							"include": "#pattern"
						},
						{
							"include": "#punctuation-comma"
						}
					]
				},
				{
					"begin": "(?<=\\])",
					"end": "(?=[)}\\],;:?=&|^]|!=|\\b(and|or)\\b)",
					"patterns": [
						{
							"include": "#intrusive"
						},
						{
							"include": "#simple-designation-pattern"
						}
					]
				}
			]
		},
		"slice-pattern": {
			"match": "\\.\\.",
			"name": "keyword.operator.range.cs"
		},
		"do-statement": {
			"begin": "(?<!\\.)\\b(do)\\b",
			"beginCaptures": {
				"1": {
					"name": "keyword.control.loop.do.cs"
				}
			},
			"end": "(?=;|})",
			"patterns": [
				{
					"include": "#statement"
				}
			]
		},
		"while-statement": {
			"begin": "(?<!\\.)\\b(while)\\b\\s*(?=\\()",
			"beginCaptures": {
				"1": {
					"name": "keyword.control.loop.while.cs"
				}
			},
			"end": "(?<=\\})|(?=;)",
			"patterns": [
				{
					"begin": "\\(",
					"beginCaptures": {
						"0": {
							"name": "punctuation.parenthesis.open.cs"
						}
					},
					"end": "\\)",
					"endCaptures": {
						"0": {
							"name": "punctuation.parenthesis.close.cs"
						}
					},
					"patterns": [
						{
							"include": "#expression"
						}
					]
				},
				{
					"include": "#statement"
				}
			]
		},
		"for-statement": {
			"begin": "\\b(for)\\b",
			"beginCaptures": {
				"1": {
					"name": "keyword.control.loop.for.cs"
				}
			},
			"end": "(?<=\\))|(?=;|})",
			"patterns": [
				{
					"begin": "\\(",
					"beginCaptures": {
						"0": {
							"name": "punctuation.parenthesis.open.cs"
						}
					},
					"end": "\\)",
					"endCaptures": {
						"0": {
							"name": "punctuation.parenthesis.close.cs"
						}
					},
					"patterns": [
						{
							"begin": "(?=[^;\\)])",
							"end": "(?=;|\\))",
							"patterns": [
								{
									"include": "#intrusive"
								},
								{
									"include": "#local-variable-declaration"
								}
							]
						},
						{
							"begin": "(?=;)",
							"end": "(?=\\))",
							"patterns": [
								{
									"include": "#intrusive"
								},
								{
									"include": "#expression"
								},
								{
									"include": "#punctuation-comma"
								},
								{
									"include": "#punctuation-semicolon"
								}
							]
						}
					]
				}
			]
		},
		"foreach-statement": {
			"begin": "\\b(foreach)\\b",
			"beginCaptures": {
				"1": {
					"name": "keyword.control.loop.foreach.cs"
				}
			},
			"end": "(?<=\\))|(?=;|})",
			"patterns": [
				{
					"include": "#intrusive"
				},
				{
					"begin": "\\(",
					"beginCaptures": {
						"0": {
							"name": "punctuation.parenthesis.open.cs"
						}
					},
					"end": "\\)",
					"endCaptures": {
						"0": {
							"name": "punctuation.parenthesis.close.cs"
						}
					},
					"patterns": [
						{
							"include": "#intrusive"
						},
						{
							"match": "(?x)\n(?:\n  (?:(\\bref)\\s+)?(\\bauto\\b)| # ref local\n  (?<type_name>\n    (?:\n      (?:ref\\s+)?   # ref local\n      (?:\n        (?:(?<identifier>@?[_[:alpha:]][_[:alnum:]]*)\\s*\\:\\:\\s*)? # alias-qualification\n        (?<name_and_type_args> # identifier + type arguments (if any)\n          \\g<identifier>\\s*\n          (?<type_args>\\s*<(?:[^<>]|\\g<type_args>)+>\\s*)?\n        )\n        (?:\\s*\\.\\s*\\g<name_and_type_args>)* | # Are there any more names being dotted into?\n        (?<tuple>\\s*\\((?:[^\\(\\)]|\\g<tuple>)+\\))\n      )\n      (?:\\s*\\?\\s*)? # nullable suffix?\n      (?:\\s* # array suffix?\n        \\[\n          (?:\\s*,\\s*)* # commata for multi-dimensional arrays\n        \\]\n        \\s*\n        (?:\\?)? # arrays can be nullable reference types\n        \\s*\n      )*\n    )\n  )\n)\\s+\n(\\g<identifier>)\\s+\n\\b(in)\\b",
							"captures": {
								"1": {
									"name": "storage.modifier.ref.cs"
								},
								"2": {
									"name": "storage.type.var.cs"
								},
								"3": {
									"patterns": [
										{
											"include": "#type"
										}
									]
								},
								"8": {
									"name": "entity.name.variable.local.cs"
								},
								"9": {
									"name": "keyword.control.loop.in.cs"
								}
							}
						},
						{
							"include": "#expression"
						}
					]
				}
			]
		},
		"local-declaration": {
			"patterns": [
				{
					"include": "#local-constant-declaration"
				},
				{
					"include": "#local-variable-declaration"
				},
				{
					"include": "#local-function-declaration"
				}
			]
		},
		"local-variable-declaration": {
			"begin": "(?x)\n(?:\n  (?:(\\bref)\\s+(?:(\\breadonly)\\s+)?)?(\\bvar\\b)| # ref local\n  (?<type_name>\n    (?:\n      (?:ref\\s+(?:readonly\\s+)?)?   # ref local\n      (?:\n        (?:(?<identifier>@?[_[:alpha:]][_[:alnum:]]*)\\s*\\:\\:\\s*)? # alias-qualification\n        (?<name_and_type_args> # identifier + type arguments (if any)\n          \\g<identifier>\\s*\n          (?<type_args>\\s*<(?:[^<>]|\\g<type_args>)+>\\s*)?\n        )\n        (?:\\s*\\.\\s*\\g<name_and_type_args>)* | # Are there any more names being dotted into?\n        (?<tuple>\\s*\\((?:[^\\(\\)]|\\g<tuple>)+\\))\n      )\n      (?:\\s*[?*]\\s*)? # nullable or pointer suffix?\n      (?:\\s* # array suffix?\n        \\[\n          (?:\\s*,\\s*)* # commata for multi-dimensional arrays\n        \\]\n        \\s*\n        (?:\\?)? # arrays can be nullable reference types\n        \\s*\n      )*\n    )\n  )\n)\\s+\n(\\g<identifier>)\\s*\n(?!=>)\n(?=,|;|=|\\))",
			"beginCaptures": {
				"1": {
					"name": "storage.modifier.ref.cs"
				},
				"2": {
					"name": "storage.modifier.readonly.cs"
				},
				"3": {
					"name": "storage.type.var.cs"
				},
				"4": {
					"patterns": [
						{
							"include": "#type"
						}
					]
				},
				"9": {
					"name": "entity.name.variable.local.cs"
				}
			},
			"end": "(?=[;)}])",
			"patterns": [
				{
					"name": "entity.name.variable.local.cs",
					"match": "@?[_[:alpha:]][_[:alnum:]]*"
				},
				{
					"include": "#punctuation-comma"
				},
				{
					"include": "#comment"
				},
				{
					"include": "#variable-initializer"
				}
			]
		},
		"local-constant-declaration": {
			"begin": "(?x)\n(?<const_keyword>\\b(?:const)\\b)\\s*\n(?<type_name>\n  (?:\n    (?:\n      (?:(?<identifier>@?[_[:alpha:]][_[:alnum:]]*)\\s*\\:\\:\\s*)? # alias-qualification\n      (?<name_and_type_args> # identifier + type arguments (if any)\n        \\g<identifier>\\s*\n        (?<type_args>\\s*<(?:[^<>]|\\g<type_args>)+>\\s*)?\n      )\n      (?:\\s*\\.\\s*\\g<name_and_type_args>)* | # Are there any more names being dotted into?\n      (?<tuple>\\s*\\((?:[^\\(\\)]|\\g<tuple>)+\\))\n    )\n    (?:\\s*\\?\\s*)? # nullable suffix?\n    (?:\\s* # array suffix?\n      \\[\n        (?:\\s*,\\s*)* # commata for multi-dimensional arrays\n      \\]\n      \\s*\n      (?:\\?)? # arrays can be nullable reference types\n      \\s*\n    )*\n  )\n)\\s+\n(\\g<identifier>)\\s*\n(?=,|;|=)",
			"beginCaptures": {
				"1": {
					"name": "storage.modifier.const.cs"
				},
				"2": {
					"patterns": [
						{
							"include": "#type"
						}
					]
				},
				"7": {
					"name": "entity.name.variable.local.cs"
				}
			},
			"end": "(?=;)",
			"patterns": [
				{
					"name": "entity.name.variable.local.cs",
					"match": "@?[_[:alpha:]][_[:alnum:]]*"
				},
				{
					"include": "#punctuation-comma"
				},
				{
					"include": "#comment"
				},
				{
					"include": "#variable-initializer"
				}
			]
		},
		"local-function-declaration": {
			"begin": "(?x)\n\\b((?:(?:async|unsafe|static|extern)\\s+)*)\n(?<type_name>\n  (?:ref\\s+(?:readonly\\s+)?)?   # ref return\n  (?:\n    (?:(?<identifier>@?[_[:alpha:]][_[:alnum:]]*)\\s*\\:\\:\\s*)? # alias-qualification\n    (?<name_and_type_args> # identifier + type arguments (if any)\n      \\g<identifier>\\s*\n      (?<type_args>\\s*<(?:[^<>]|\\g<type_args>)+>\\s*)?\n    )\n    (?:\\s*\\.\\s*\\g<name_and_type_args>)* | # Are there any more names being dotted into?\n    (?<tuple>\\s*\\((?:[^\\(\\)]|\\g<tuple>)+\\))\n  )\n  (?:\\s*\\?)? # nullable suffix?\n  (?:\\s* # array suffix?\n    \\[\n      \\s*(?:,\\s*)* # commata for multi-dimensional arrays\n    \\]\n    (?:\\s*\\?)? # arrays can be nullable reference types\n  )*\n)\\s+\n(\\g<identifier>)\\s*\n(<[^<>]+>)?\\s*\n(?=\\()",
			"beginCaptures": {
				"1": {
					"patterns": [
						{
							"include": "#storage-modifier"
						}
					]
				},
				"2": {
					"patterns": [
						{
							"include": "#type"
						}
					]
				},
				"7": {
					"name": "entity.name.function.cs"
				},
				"8": {
					"patterns": [
						{
							"include": "#type-parameter-list"
						}
					]
				}
			},
			"end": "(?<=\\})|(?=;)",
			"patterns": [
				{
					"include": "#comment"
				},
				{
					"include": "#parenthesized-parameter-list"
				},
				{
					"include": "#generic-constraints"
				},
				{
					"include": "#expression-body"
				},
				{
					"include": "#block"
				}
			]
		},
		"declaration-expression-local": {
			"match": "(?x) # e.g. int x OR var x\n(?:\n  \\b(var)\\b|\n  (?<type_name>\n    (?:\n      (?:\n        (?:(?<identifier>@?[_[:alpha:]][_[:alnum:]]*)\\s*\\:\\:\\s*)? # alias-qualification\n        (?<name_and_type_args> # identifier + type arguments (if any)\n          \\g<identifier>\\s*\n          (?<type_args>\\s*<(?:[^<>]|\\g<type_args>)+>\\s*)?\n        )\n        (?:\\s*\\.\\s*\\g<name_and_type_args>)* | # Are there any more names being dotted into?\n        (?<tuple>\\s*\\((?:[^\\(\\)]|\\g<tuple>)+\\))\n      )\n      (?:\\s*\\?\\s*)? # nullable suffix?\n      (?:\\s* # array suffix?\n        \\[\n          (?:\\s*,\\s*)* # commata for multi-dimensional arrays\n        \\]\n        \\s*\n        (?:\\?)? # arrays can be nullable reference types\n        \\s*\n      )*\n    )\n  )\n)\\s+\n(\\g<identifier>)\\b\\s*\n(?=[,)\\]])",
			"captures": {
				"1": {
					"name": "storage.type.var.cs"
				},
				"2": {
					"patterns": [
						{
							"include": "#type"
						}
					]
				},
				"7": {
					"name": "entity.name.variable.local.cs"
				}
			}
		},
		"expression-operator-expression": {
			"begin": "\\b(checked|unchecked|nameof)\\s*(\\()",
			"beginCaptures": {
				"1": {
					"name": "keyword.operator.expression.$1.cs"
				},
				"2": {
					"name": "punctuation.parenthesis.open.cs"
				}
			},
			"end": "\\)",
			"endCaptures": {
				"0": {
					"name": "punctuation.parenthesis.close.cs"
				}
			},
			"patterns": [
				{
					"include": "#expression"
				}
			]
		},
		"type-operator-expression": {
			"begin": "\\b(default|sizeof)\\s*(\\()",
			"beginCaptures": {
				"1": {
					"name": "keyword.operator.expression.$1.cs"
				},
				"2": {
					"name": "punctuation.parenthesis.open.cs"
				}
			},
			"end": "\\)",
			"endCaptures": {
				"0": {
					"name": "punctuation.parenthesis.close.cs"
				}
			},
			"patterns": [
				{
					"include": "#type"
				}
			]
		},
		"default-literal-expression": {
			"match": "\\b(default)\\b",
			"captures": {
				"1": {
					"name": "keyword.operator.expression.default.cs"
				}
			}
		},
		"interpolated-string": {
			"name": "string.quoted.double.cs",
			"begin": "\\$\"",
			"beginCaptures": {
				"0": {
					"name": "punctuation.definition.string.begin.cs"
				}
			},
			"end": "(\")|((?:[^\\\\\\n])$)",
			"endCaptures": {
				"1": {
					"name": "punctuation.definition.string.end.cs"
				},
				"2": {
					"name": "invalid.illegal.newline.cs"
				}
			},
			"patterns": [
				{
					"include": "#string-character-escape"
				},
				{
					"include": "#interpolation"
				}
			]
		},
		"verbatim-interpolated-string": {
			"name": "string.quoted.double.cs",
			"begin": "(?:\\$@|@\\$)\"",
			"beginCaptures": {
				"0": {
					"name": "punctuation.definition.string.begin.cs"
				}
			},
			"end": "\"(?=[^\"])",
			"endCaptures": {
				"0": {
					"name": "punctuation.definition.string.end.cs"
				}
			},
			"patterns": [
				{
					"include": "#verbatim-string-character-escape"
				},
				{
					"include": "#interpolation"
				}
			]
		},
		"interpolation": {
			"name": "meta.interpolation.cs",
			"begin": "(?<=[^\\{]|^)((?:\\{\\{)*)(\\{)(?=[^\\{])",
			"beginCaptures": {
				"1": {
					"name": "string.quoted.double.cs"
				},
				"2": {
					"name": "punctuation.definition.interpolation.begin.cs"
				}
			},
			"end": "\\}",
			"endCaptures": {
				"0": {
					"name": "punctuation.definition.interpolation.end.cs"
				}
			},
			"patterns": [
				{
					"include": "#expression"
				}
			]
		},
		"raw-interpolated-string": {
			"patterns": [
				{
					"include": "#raw-interpolated-string-five-or-more-quote-one-or-more-interpolation"
				},
				{
					"include": "#raw-interpolated-string-three-or-more-quote-three-or-more-interpolation"
				},
				{
					"include": "#raw-interpolated-string-quadruple-quote-double-interpolation"
				},
				{
					"include": "#raw-interpolated-string-quadruple-quote-single-interpolation"
				},
				{
					"include": "#raw-interpolated-string-triple-quote-double-interpolation"
				},
				{
					"include": "#raw-interpolated-string-triple-quote-single-interpolation"
				}
			]
		},
		"raw-interpolated-string-triple-quote-single-interpolation": {
			"name": "string.quoted.double.cs",
			"begin": "\\$\"\"\"",
			"beginCaptures": {
				"0": {
					"name": "punctuation.definition.string.begin.cs"
				}
			},
			"end": "\"\"\"",
			"endCaptures": {
				"0": {
					"name": "punctuation.definition.string.end.cs"
				}
			},
			"patterns": [
				{
					"include": "#raw-interpolation"
				}
			]
		},
		"raw-interpolated-string-triple-quote-double-interpolation": {
			"name": "string.quoted.double.cs",
			"begin": "\\$\\$\"\"\"",
			"beginCaptures": {
				"0": {
					"name": "punctuation.definition.string.begin.cs"
				}
			},
			"end": "\"\"\"",
			"endCaptures": {
				"0": {
					"name": "punctuation.definition.string.end.cs"
				}
			},
			"patterns": [
				{
					"include": "#double-raw-interpolation"
				}
			]
		},
		"raw-interpolated-string-quadruple-quote-single-interpolation": {
			"name": "string.quoted.double.cs",
			"begin": "\\$\"\"\"\"",
			"beginCaptures": {
				"0": {
					"name": "punctuation.definition.string.begin.cs"
				}
			},
			"end": "\"\"\"\"",
			"endCaptures": {
				"0": {
					"name": "punctuation.definition.string.end.cs"
				}
			},
			"patterns": [
				{
					"include": "#raw-interpolation"
				}
			]
		},
		"raw-interpolated-string-quadruple-quote-double-interpolation": {
			"name": "string.quoted.double.cs",
			"begin": "\\$\\$\"\"\"\"",
			"beginCaptures": {
				"0": {
					"name": "punctuation.definition.string.begin.cs"
				}
			},
			"end": "\"\"\"\"",
			"endCaptures": {
				"0": {
					"name": "punctuation.definition.string.end.cs"
				}
			},
			"patterns": [
				{
					"include": "#double-raw-interpolation"
				}
			]
		},
		"raw-interpolated-string-three-or-more-quote-three-or-more-interpolation": {
			"name": "string.quoted.double.cs",
			"begin": "\\$\\$\\$+\"\"\"+",
			"beginCaptures": {
				"0": {
					"name": "punctuation.definition.string.begin.cs"
				}
			},
			"end": "\"\"\"+",
			"endCaptures": {
				"0": {
					"name": "punctuation.definition.string.end.cs"
				}
			}
		},
		"raw-interpolated-string-five-or-more-quote-one-or-more-interpolation": {
			"name": "string.quoted.double.cs",
			"begin": "\\$+\"\"\"\"\"+",
			"beginCaptures": {
				"0": {
					"name": "punctuation.definition.string.begin.cs"
				}
			},
			"end": "\"\"\"\"\"+",
			"endCaptures": {
				"0": {
					"name": "punctuation.definition.string.end.cs"
				}
			}
		},
		"raw-interpolation": {
			"name": "meta.interpolation.cs",
			"begin": "(?<=[^\\{]|^)((?:\\{)*)(\\{)(?=[^\\{])",
			"beginCaptures": {
				"1": {
					"name": "string.quoted.double.cs"
				},
				"2": {
					"name": "punctuation.definition.interpolation.begin.cs"
				}
			},
			"end": "\\}",
			"endCaptures": {
				"0": {
					"name": "punctuation.definition.interpolation.end.cs"
				}
			},
			"patterns": [
				{
					"include": "#expression"
				}
			]
		},
		"double-raw-interpolation": {
			"name": "meta.interpolation.cs",
			"begin": "(?<=[^\\{][^\\{]|^)((?:\\{)*)(\\{\\{)(?=[^\\{])",
			"beginCaptures": {
				"1": {
					"name": "string.quoted.double.cs"
				},
				"2": {
					"name": "punctuation.definition.interpolation.begin.cs"
				}
			},
			"end": "\\}\\}",
			"endCaptures": {
				"0": {
					"name": "punctuation.definition.interpolation.end.cs"
				}
			},
			"patterns": [
				{
					"include": "#expression"
				}
			]
		},
		"literal": {
			"patterns": [
				{
					"include": "#boolean-literal"
				},
				{
					"include": "#null-literal"
				},
				{
					"include": "#numeric-literal"
				},
				{
					"include": "#char-literal"
				},
				{
					"include": "#raw-string-literal"
				},
				{
					"include": "#string-literal"
				},
				{
					"include": "#verbatim-string-literal"
				}
			]
		},
		"boolean-literal": {
			"patterns": [
				{
					"name": "constant.language.boolean.true.cs",
					"match": "(?<!\\.)\\btrue\\b"
				},
				{
					"name": "constant.language.boolean.false.cs",
					"match": "(?<!\\.)\\bfalse\\b"
				}
			]
		},
		"null-literal": {
			"name": "constant.language.null.cs",
			"match": "(?<!\\.)\\bnull\\b"
		},
		"numeric-literal": {
			"match": "(?<!\\w)\\.?\\d(?:(?:[0-9a-zA-Z_]|_)|(?<=[eE])[+-]|\\.\\d)*",
			"captures": {
				"0": {
					"patterns": [
						{
							"begin": "(?=.)",
							"end": "$",
							"patterns": [
								{
									"match": "(\\G(?=[0-9.])(?!0[xXbB]))([0-9](?:[0-9]|((?<=[0-9a-fA-F])_(?=[0-9a-fA-F])))*)?((?:(?<=[0-9])|\\.(?=[0-9])))([0-9](?:[0-9]|((?<=[0-9a-fA-F])_(?=[0-9a-fA-F])))*)?((?<!_)([eE])(\\+?)(\\-?)((?:[0-9](?:[0-9]|(?:(?<=[0-9a-fA-F])_(?=[0-9a-fA-F])))*)))?([fFdDmM](?!\\w))?$",
									"captures": {
										"2": {
											"name": "constant.numeric.decimal.cs",
											"patterns": [
												{
													"match": "(?<=[0-9a-fA-F])_(?=[0-9a-fA-F])",
													"name": "constant.numeric.other.separator.thousands.cs"
												}
											]
										},
										"3": {
											"name": "constant.numeric.other.separator.thousands.cs"
										},
										"4": {
											"name": "constant.numeric.other.separator.decimals.cs"
										},
										"5": {
											"name": "constant.numeric.decimal.cs",
											"patterns": [
												{
													"match": "(?<=[0-9a-fA-F])_(?=[0-9a-fA-F])",
													"name": "constant.numeric.other.separator.thousands.cs"
												}
											]
										},
										"6": {
											"name": "constant.numeric.other.separator.thousands.cs"
										},
										"8": {
											"name": "constant.numeric.other.exponent.cs"
										},
										"9": {
											"name": "keyword.operator.arithmetic.cs"
										},
										"10": {
											"name": "keyword.operator.arithmetic.cs"
										},
										"11": {
											"name": "constant.numeric.decimal.cs",
											"patterns": [
												{
													"match": "(?<=[0-9a-fA-F])_(?=[0-9a-fA-F])",
													"name": "constant.numeric.other.separator.thousands.cs"
												}
											]
										},
										"12": {
											"name": "constant.numeric.other.suffix.cs"
										}
									}
								},
								{
									"match": "(\\G0[bB])([01_](?:[01_]|((?<=[0-9a-fA-F])_(?=[0-9a-fA-F])))*)((?:(?:(?:(?:(?:[uU]|[uU]l)|[uU]L)|l[uU]?)|L[uU]?)|[fFdDmM])(?!\\w))?$",
									"captures": {
										"1": {
											"name": "constant.numeric.other.preffix.binary.cs"
										},
										"2": {
											"name": "constant.numeric.binary.cs",
											"patterns": [
												{
													"match": "(?<=[0-9a-fA-F])_(?=[0-9a-fA-F])",
													"name": "constant.numeric.other.separator.thousands.cs"
												}
											]
										},
										"3": {
											"name": "constant.numeric.other.separator.thousands.cs"
										},
										"4": {
											"name": "constant.numeric.other.suffix.cs"
										}
									}
								},
								{
									"match": "(\\G0[xX])([0-9a-fA-F](?:[0-9a-fA-F]|((?<=[0-9a-fA-F])_(?=[0-9a-fA-F])))*)((?:(?:(?:(?:(?:[uU]|[uU]l)|[uU]L)|l[uU]?)|L[uU]?)|[fFdDmM])(?!\\w))?$",
									"captures": {
										"1": {
											"name": "constant.numeric.other.preffix.hex.cs"
										},
										"2": {
											"name": "constant.numeric.hex.cs",
											"patterns": [
												{
													"match": "(?<=[0-9a-fA-F])_(?=[0-9a-fA-F])",
													"name": "constant.numeric.other.separator.thousands.cs"
												}
											]
										},
										"3": {
											"name": "constant.numeric.other.separator.thousands.cs"
										},
										"4": {
											"name": "constant.numeric.other.suffix.cs"
										}
									}
								},
								{
									"match": "(\\G(?=[0-9.])(?!0[xXbB]))([0-9](?:[0-9]|((?<=[0-9a-fA-F])_(?=[0-9a-fA-F])))*)((?<!_)([eE])(\\+?)(\\-?)((?:[0-9](?:[0-9]|(?:(?<=[0-9a-fA-F])_(?=[0-9a-fA-F])))*)))?((?:(?:(?:(?:(?:[uU]|[uU]l)|[uU]L)|l[uU]?)|L[uU]?)|[fFdDmM])(?!\\w))?$",
									"captures": {
										"2": {
											"name": "constant.numeric.decimal.cs",
											"patterns": [
												{
													"match": "(?<=[0-9a-fA-F])_(?=[0-9a-fA-F])",
													"name": "constant.numeric.other.separator.thousands.cs"
												}
											]
										},
										"3": {
											"name": "constant.numeric.other.separator.thousands.cs"
										},
										"5": {
											"name": "constant.numeric.other.exponent.cs"
										},
										"6": {
											"name": "keyword.operator.arithmetic.cs"
										},
										"7": {
											"name": "keyword.operator.arithmetic.cs"
										},
										"8": {
											"name": "constant.numeric.decimal.cs",
											"patterns": [
												{
													"match": "(?<=[0-9a-fA-F])_(?=[0-9a-fA-F])",
													"name": "constant.numeric.other.separator.thousands.cs"
												}
											]
										},
										"9": {
											"name": "constant.numeric.other.suffix.cs"
										}
									}
								},
								{
									"match": "(?:(?:[0-9a-zA-Z_]|_)|(?<=[eE])[+-]|\\.\\d)+",
									"name": "invalid.illegal.constant.numeric.cs"
								}
							]
						}
					]
				}
			}
		},
		"char-literal": {
			"name": "string.quoted.single.cs",
			"begin": "'",
			"beginCaptures": {
				"0": {
					"name": "punctuation.definition.char.begin.cs"
				}
			},
			"end": "(\\')|((?:[^\\\\\\n])$)",
			"endCaptures": {
				"1": {
					"name": "punctuation.definition.char.end.cs"
				},
				"2": {
					"name": "invalid.illegal.newline.cs"
				}
			},
			"patterns": [
				{
					"include": "#char-character-escape"
				}
			]
		},
		"char-character-escape": {
			"name": "constant.character.escape.cs",
			"match": "\\\\(x[0-9a-fA-F]{1,4}|u[0-9a-fA-F]{4}|.)"
		},
		"string-literal": {
			"name": "string.quoted.double.cs",
			"begin": "(?<!@)\"",
			"beginCaptures": {
				"0": {
					"name": "punctuation.definition.string.begin.cs"
				}
			},
			"end": "(\")|((?:[^\\\\\\n])$)",
			"endCaptures": {
				"1": {
					"name": "punctuation.definition.string.end.cs"
				},
				"2": {
					"name": "invalid.illegal.newline.cs"
				}
			},
			"patterns": [
				{
					"include": "#string-character-escape"
				}
			]
		},
		"string-character-escape": {
			"name": "constant.character.escape.cs",
			"match": "\\\\(x[0-9a-fA-F]{1,4}|U[0-9a-fA-F]{8}|u[0-9a-fA-F]{4}|.)"
		},
		"verbatim-string-literal": {
			"name": "string.quoted.double.cs",
			"begin": "@\"",
			"beginCaptures": {
				"0": {
					"name": "punctuation.definition.string.begin.cs"
				}
			},
			"end": "\"(?=[^\"])",
			"endCaptures": {
				"0": {
					"name": "punctuation.definition.string.end.cs"
				}
			},
			"patterns": [
				{
					"include": "#verbatim-string-character-escape"
				}
			]
		},
		"verbatim-string-character-escape": {
			"name": "constant.character.escape.cs",
			"match": "\"\""
		},
		"raw-string-literal": {
			"patterns": [
				{
					"include": "#raw-string-literal-more"
				},
				{
					"include": "#raw-string-literal-quadruple"
				},
				{
					"include": "#raw-string-literal-triple"
				}
			]
		},
		"raw-string-literal-triple": {
			"name": "string.quoted.double.cs",
			"begin": "\"\"\"",
			"beginCaptures": {
				"0": {
					"name": "punctuation.definition.string.begin.cs"
				}
			},
			"end": "\"\"\"",
			"endCaptures": {
				"0": {
					"name": "punctuation.definition.string.end.cs"
				}
			}
		},
		"raw-string-literal-quadruple": {
			"name": "string.quoted.double.cs",
			"begin": "\"\"\"\"",
			"beginCaptures": {
				"0": {
					"name": "punctuation.definition.string.begin.cs"
				}
			},
			"end": "\"\"\"\"",
			"endCaptures": {
				"0": {
					"name": "punctuation.definition.string.end.cs"
				}
			}
		},
		"raw-string-literal-more": {
			"name": "string.quoted.double.cs",
			"begin": "\"\"\"\"\"+",
			"beginCaptures": {
				"0": {
					"name": "punctuation.definition.string.begin.cs"
				}
			},
			"end": "\"\"\"\"\"+",
			"endCaptures": {
				"0": {
					"name": "punctuation.definition.string.end.cs"
				}
			}
		},
		"assignment-expression": {
			"begin": "(?:\\*|/|%|\\+|-|\\?\\?|\\&|\\^|<<|>>>?|\\|)?=(?!=|>)",
			"beginCaptures": {
				"0": {
					"patterns": [
						{
							"include": "#assignment-operators"
						}
					]
				}
			},
			"end": "(?=[,\\)\\];}])",
			"patterns": [
				{
					"include": "#ref-modifier"
				},
				{
					"include": "#expression"
				}
			]
		},
		"assignment-operators": {
			"patterns": [
				{
					"name": "keyword.operator.assignment.compound.cs",
					"match": "\\*=|/=|%=|\\+=|-=|\\?\\?="
				},
				{
					"name": "keyword.operator.assignment.compound.bitwise.cs",
					"match": "\\&=|\\^=|<<=|>>>?=|\\|="
				},
				{
					"name": "keyword.operator.assignment.cs",
					"match": "\\="
				}
			]
		},
		"expression-operators": {
			"patterns": [
				{
					"name": "keyword.operator.bitwise.shift.cs",
					"match": "<<|>>>?"
				},
				{
					"name": "keyword.operator.comparison.cs",
					"match": "==|!="
				},
				{
					"name": "keyword.operator.relational.cs",
					"match": "<=|>=|<|>"
				},
				{
					"name": "keyword.operator.logical.cs",
					"match": "\\!|&&|\\|\\|"
				},
				{
					"name": "keyword.operator.bitwise.cs",
					"match": "\\&|~|\\^|\\|"
				},
				{
					"name": "keyword.operator.decrement.cs",
					"match": "--"
				},
				{
					"name": "keyword.operator.increment.cs",
					"match": "\\+\\+"
				},
				{
					"name": "keyword.operator.arithmetic.cs",
					"match": "\\+|-(?!>)|\\*|/|%"
				},
				{
					"name": "keyword.operator.null-coalescing.cs",
					"match": "\\?\\?"
				},
				{
					"name": "keyword.operator.range.cs",
					"match": "\\.\\."
				}
			]
		},
		"conditional-operator": {
			"patterns": [
				{
					"name": "keyword.operator.conditional.question-mark.cs",
					"match": "\\?(?!\\?|\\s*[.\\[])"
				},
				{
					"name": "keyword.operator.conditional.colon.cs",
					"match": ":"
				}
			]
		},
		"parenthesized-expression": {
			"begin": "\\(",
			"beginCaptures": {
				"0": {
					"name": "punctuation.parenthesis.open.cs"
				}
			},
			"end": "\\)",
			"endCaptures": {
				"0": {
					"name": "punctuation.parenthesis.close.cs"
				}
			},
			"patterns": [
				{
					"include": "#expression"
				}
			]
		},
		"initializer-expression": {
			"begin": "\\{",
			"beginCaptures": {
				"0": {
					"name": "punctuation.curlybrace.open.cs"
				}
			},
			"end": "\\}",
			"endCaptures": {
				"0": {
					"name": "punctuation.curlybrace.close.cs"
				}
			},
			"patterns": [
				{
					"include": "#expression"
				},
				{
					"include": "#punctuation-comma"
				}
			]
		},
		"identifier": {
			"name": "variable.other.readwrite.cs",
			"match": "@?[_[:alpha:]][_[:alnum:]]*"
		},
		"cast-expression": {
			"match": "(?x)\n(\\()\\s*\n(?<type_name>\n  (?:\n    (?:\n      (?:(?<identifier>@?[_[:alpha:]][_[:alnum:]]*)\\s*\\:\\:\\s*)? # alias-qualification\n      (?<name_and_type_args> # identifier + type arguments (if any)\n        \\g<identifier>\\s*\n        (?<type_args>\\s*<(?:[^<>]|\\g<type_args>)+>\\s*)?\n      )\n      (?:\\s*\\.\\s*\\g<name_and_type_args>)* | # Are there any more names being dotted into?\n      (?<tuple>\\s*\\((?:[^\\(\\)]|\\g<tuple>)+\\))\n    )\n    (?:\\s*\\?\\s*)? # nullable suffix?\n    (?:\\s* # array suffix?\n      \\[\n        (?:\\s*,\\s*)* # commata for multi-dimensional arrays\n      \\]\n      \\s*\n      (?:\\?)? # arrays can be nullable reference types\n      \\s*\n    )*\n  )\n)\\s*\n(\\))(?=\\s*-*!*@?[_[:alnum:]\\(])",
			"captures": {
				"1": {
					"name": "punctuation.parenthesis.open.cs"
				},
				"2": {
					"patterns": [
						{
							"include": "#type"
						}
					]
				},
				"7": {
					"name": "punctuation.parenthesis.close.cs"
				}
			}
		},
		"language-variable": {
			"patterns": [
				{
					"name": "variable.language.$1.cs",
					"match": "\\b(base|this|super)\\b"
				},
				{
					"name": "variable.other.$1.cs",
					"match": "\\b(value)\\b"
				}
			]
		},
		"invocation-expression": {
			"begin": "(?x)\n(?:\n  (?:(\\?)\\s*)?                                    # preceding null-conditional operator?\n  (\\.)\\s*|                                        # preceding dot?\n  (->)\\s*                                         # preceding pointer arrow?\n)?\n(@?[_[:alpha:]][_[:alnum:]]*)\\s*                  # method name\n(\n  <\n  (?<type_args>\n    [^<>()]|\n    \\((?:[^<>()]|<[^<>()]*>|\\([^<>()]*\\))*\\)|\n    <\\g<type_args>*>\n  )*\n  >\\s*\n)?                                                # type arguments\n(?=\\()                                            # open paren of argument list",
			"beginCaptures": {
				"1": {
					"name": "keyword.operator.null-conditional.cs"
				},
				"2": {
					"name": "punctuation.accessor.cs"
				},
				"3": {
					"name": "punctuation.accessor.pointer.cs"
				},
				"4": {
					"name": "entity.name.function.cs"
				},
				"5": {
					"patterns": [
						{
							"include": "#type-arguments"
						}
					]
				}
			},
			"end": "(?<=\\))",
			"patterns": [
				{
					"include": "#argument-list"
				}
			]
		},
		"element-access-expression": {
			"begin": "(?x)\n(?:\n  (?:(\\?)\\s*)?  # preceding null-conditional operator?\n  (\\.)\\s*|      # preceding dot?\n  (->)\\s*       # preceding pointer arrow?\n)?\n(?:(@?[_[:alpha:]][_[:alnum:]]*)\\s*)? # property name\n(?:(\\?)\\s*)?                        # null-conditional operator?\n(?=\\[)                              # open bracket of argument list",
			"beginCaptures": {
				"1": {
					"name": "keyword.operator.null-conditional.cs"
				},
				"2": {
					"name": "punctuation.accessor.cs"
				},
				"3": {
					"name": "punctuation.accessor.pointer.cs"
				},
				"4": {
					"name": "variable.other.object.property.cs"
				},
				"5": {
					"name": "keyword.operator.null-conditional.cs"
				}
			},
			"end": "(?<=\\])(?!\\s*\\[)",
			"patterns": [
				{
					"include": "#bracketed-argument-list"
				}
			]
		},
		"member-access-expression": {
			"patterns": [
				{
					"match": "(?x)\n(?:\n  (?:(\\?)\\s*)?                    # preceding null-conditional operator?\n  (\\.)\\s*|                        # preceding dot?\n  (->)\\s*                         # preceding pointer arrow?\n)\n(@?[_[:alpha:]][_[:alnum:]]*)\\s*  # property name\n(?![_[:alnum:]]|\\(|(\\?)?\\[|<)     # next character is not alpha-numeric, nor a (, [, or <. Also, test for ?[",
					"captures": {
						"1": {
							"name": "keyword.operator.null-conditional.cs"
						},
						"2": {
							"name": "punctuation.accessor.cs"
						},
						"3": {
							"name": "punctuation.accessor.pointer.cs"
						},
						"4": {
							"name": "variable.other.object.property.cs"
						}
					}
				},
				{
					"match": "(?x)\n(\\.)?\\s*\n(@?[_[:alpha:]][_[:alnum:]]*)\n(?<type_params>\\s*<([^<>]|\\g<type_params>)+>\\s*)\n(?=\n  (\\s*\\?)?\n  \\s*\\.\\s*@?[_[:alpha:]][_[:alnum:]]*\n)",
					"captures": {
						"1": {
							"name": "punctuation.accessor.cs"
						},
						"2": {
							"name": "variable.other.object.cs"
						},
						"3": {
							"patterns": [
								{
									"include": "#type-arguments"
								}
							]
						}
					}
				},
				{
					"match": "(?x)\n(@?[_[:alpha:]][_[:alnum:]]*)\n(?=\n  \\s*(?:(?:\\?\\s*)?\\.|->)\n  \\s*@?[_[:alpha:]][_[:alnum:]]*\n)",
					"captures": {
						"1": {
							"name": "variable.other.object.cs"
						}
					}
				}
			]
		},
		"object-creation-expression": {
			"patterns": [
				{
					"include": "#object-creation-expression-with-parameters"
				},
				{
					"include": "#object-creation-expression-with-no-parameters"
				}
			]
		},
		"object-creation-expression-with-parameters": {
			"begin": "(?x)\n(new)(?:\\s+\n(?<type_name>\n  (?:\n    (?:\n      (?:(?<identifier>@?[_[:alpha:]][_[:alnum:]]*)\\s*\\:\\:\\s*)? # alias-qualification\n      (?<name_and_type_args> # identifier + type arguments (if any)\n        \\g<identifier>\\s*\n        (?<type_args>\\s*<(?:[^<>]|\\g<type_args>)+>\\s*)?\n      )\n      (?:\\s*\\.\\s*\\g<name_and_type_args>)* | # Are there any more names being dotted into?\n      (?<tuple>\\s*\\((?:[^\\(\\)]|\\g<tuple>)+\\))\n    )\n    (?:\\s*\\?\\s*)? # nullable suffix?\n    (?:\\s* # array suffix?\n      \\[\n        (?:\\s*,\\s*)* # commata for multi-dimensional arrays\n      \\]\n      \\s*\n      (?:\\?)? # arrays can be nullable reference types\n      \\s*\n    )*\n  )\n))?\\s*\n(?=\\()",
			"beginCaptures": {
				"1": {
					"name": "keyword.operator.expression.new.cs"
				},
				"2": {
					"patterns": [
						{
							"include": "#type"
						}
					]
				}
			},
			"end": "(?<=\\))",
			"patterns": [
				{
					"include": "#argument-list"
				}
			]
		},
		"object-creation-expression-with-no-parameters": {
			"match": "(?x)\n(new)\\s+\n(?<type_name>\n  (?:\n    (?:\n      (?:(?<identifier>@?[_[:alpha:]][_[:alnum:]]*)\\s*\\:\\:\\s*)? # alias-qualification\n      (?<name_and_type_args> # identifier + type arguments (if any)\n        \\g<identifier>\\s*\n        (?<type_args>\\s*<(?:[^<>]|\\g<type_args>)+>\\s*)?\n      )\n      (?:\\s*\\.\\s*\\g<name_and_type_args>)* | # Are there any more names being dotted into?\n      (?<tuple>\\s*\\((?:[^\\(\\)]|\\g<tuple>)+\\))\n    )\n    (?:\\s*\\?\\s*)? # nullable suffix?\n    (?:\\s* # array suffix?\n      \\[\n        (?:\\s*,\\s*)* # commata for multi-dimensional arrays\n      \\]\n      \\s*\n      (?:\\?)? # arrays can be nullable reference types\n      \\s*\n    )*\n  )\n)\\s*\n(?=\\{|//|/\\*|$)",
			"captures": {
				"1": {
					"name": "keyword.operator.expression.new.cs"
				},
				"2": {
					"patterns": [
						{
							"include": "#type"
						}
					]
				}
			}
		},
		"array-creation-expression": {
			"begin": "(?x)\n\\b(new|stackalloc)\\b\\s*\n(?<type_name>\n  (?:\n    (?:\n      (?:(?<identifier>@?[_[:alpha:]][_[:alnum:]]*)\\s*\\:\\:\\s*)? # alias-qualification\n      (?<name_and_type_args> # identifier + type arguments (if any)\n        \\g<identifier>\\s*\n        (?<type_args>\\s*<(?:[^<>]|\\g<type_args>)+>\\s*)?\n      )\n      (?:\\s*\\.\\s*\\g<name_and_type_args>)* | # Are there any more names being dotted into?\n      (?<tuple>\\s*\\((?:[^\\(\\)]|\\g<tuple>)+\\))\n    )\n    (?:\\s*\\?\\s*)? # nullable suffix?\n    (?:\\s* # array suffix?\n      \\[\n        (?:\\s*,\\s*)* # commata for multi-dimensional arrays\n      \\]\n      \\s*\n      (?:\\?)? # arrays can be nullable reference types\n      \\s*\n    )*\n  )\n)?\\s*\n(?=\\[)",
			"beginCaptures": {
				"1": {
					"name": "keyword.operator.expression.$1.cs"
				},
				"2": {
					"patterns": [
						{
							"include": "#type"
						}
					]
				}
			},
			"end": "(?<=\\])",
			"patterns": [
				{
					"include": "#bracketed-argument-list"
				}
			]
		},
		"bracketed-parameter-list": {
			"begin": "(?=(\\[))",
			"beginCaptures": {
				"1": {
					"name": "punctuation.squarebracket.open.cs"
				}
			},
			"end": "(?=(\\]))",
			"endCaptures": {
				"1": {
					"name": "punctuation.squarebracket.close.cs"
				}
			},
			"patterns": [
				{
					"begin": "(?<=\\[)",
					"end": "(?=\\])",
					"patterns": [
						{
							"include": "#comment"
						},
						{
							"include": "#attribute-section"
						},
						{
							"include": "#parameter"
						},
						{
							"include": "#punctuation-comma"
						},
						{
							"include": "#variable-initializer"
						}
					]
				}
			]
		},
		"parenthesized-parameter-list": {
			"begin": "(\\()",
			"beginCaptures": {
				"0": {
					"name": "punctuation.parenthesis.open.cs"
				}
			},
			"end": "(\\))",
			"endCaptures": {
				"0": {
					"name": "punctuation.parenthesis.close.cs"
				}
			},
			"patterns": [
				{
					"include": "#comment"
				},
				{
					"include": "#attribute-section"
				},
				{
					"include": "#parameter"
				},
				{
					"include": "#punctuation-comma"
				},
				{
					"include": "#variable-initializer"
				}
			]
		},
		"parameter": {
			"match": "(?x)\n(?:(?:\\b(ref|params|out|in|this)\\b)\\s+)?\n(?<type_name>\n  (?:\n    (?:ref\\s+)?   # ref return\n    (?:\n      (?:(?<identifier>@?[_[:alpha:]][_[:alnum:]]*)\\s*\\:\\:\\s*)? # alias-qualification\n      (?<name_and_type_args> # identifier + type arguments (if any)\n        \\g<identifier>\\s*\n        (?<type_args>\\s*<(?:[^<>]|\\g<type_args>)+>\\s*)?\n      )\n      (?:\\s*\\.\\s*\\g<name_and_type_args>)* | # Are there any more names being dotted into?\n      (?<tuple>\\s*\\((?:[^()]|\\g<tuple>)+\\))\n    )\n    (?:\\s*\\?\\s*)? # nullable suffix?\n    (?:\\s* # array suffix?\n      \\[\n        (?:\\s*,\\s*)* # commata for multi-dimensional arrays\n      \\]\n      \\s*\n      (?:\\?)? # arrays can be nullable reference types\n      \\s*\n    )*\n  )\n)\\s+\n(\\g<identifier>)",
			"captures": {
				"1": {
					"name": "storage.modifier.$1.cs"
				},
				"2": {
					"patterns": [
						{
							"include": "#type"
						}
					]
				},
				"7": {
					"name": "entity.name.variable.parameter.cs"
				}
			}
		},
		"argument-list": {
			"begin": "\\(",
			"beginCaptures": {
				"0": {
					"name": "punctuation.parenthesis.open.cs"
				}
			},
			"end": "\\)",
			"endCaptures": {
				"0": {
					"name": "punctuation.parenthesis.close.cs"
				}
			},
			"patterns": [
				{
					"include": "#named-argument"
				},
				{
					"include": "#argument"
				},
				{
					"include": "#punctuation-comma"
				}
			]
		},
		"bracketed-argument-list": {
			"begin": "\\[",
			"beginCaptures": {
				"0": {
					"name": "punctuation.squarebracket.open.cs"
				}
			},
			"end": "\\]",
			"endCaptures": {
				"0": {
					"name": "punctuation.squarebracket.close.cs"
				}
			},
			"patterns": [
				{
					"include": "#named-argument"
				},
				{
					"include": "#argument"
				},
				{
					"include": "#punctuation-comma"
				}
			]
		},
		"named-argument": {
			"begin": "(@?[_[:alpha:]][_[:alnum:]]*)\\s*(:)",
			"beginCaptures": {
				"1": {
					"name": "entity.name.variable.parameter.cs"
				},
				"2": {
					"name": "punctuation.separator.colon.cs"
				}
			},
			"end": "(?=(,|\\)|\\]))",
			"patterns": [
				{
					"include": "#argument"
				}
			]
		},
		"argument": {
			"patterns": [
				{
					"name": "storage.modifier.$1.cs",
					"match": "\\b(ref|in)\\b"
				},
				{
					"begin": "\\b(out)\\b",
					"beginCaptures": {
						"1": {
							"name": "storage.modifier.out.cs"
						}
					},
					"end": "(?=,|\\)|\\])",
					"patterns": [
						{
							"include": "#declaration-expression-local"
						},
						{
							"include": "#expression"
						}
					]
				},
				{
					"include": "#expression"
				}
			]
		},
		"default-argument": {
			"begin": "=",
			"beginCaptures": {
				"0": {
					"name": "keyword.operator.assignment.cs"
				}
			},
			"end": "(?=,|\\))",
			"patterns": [
				{
					"include": "#expression"
				}
			]
		},
		"type": {
			"patterns": [
				{
					"include": "#comment"
				},
				{
					"include": "#ref-modifier"
				},
				{
					"include": "#readonly-modifier"
				},
				{
					"include": "#type-builtin"
				},
				{
					"include": "#type-name"
				},
				{
					"include": "#type-arguments"
				},
				{
					"include": "#type-array-suffix"
				},
				{
					"include": "#type-nullable-suffix"
				},
				{
					"include": "#type-pointer-suffix"
				}
			]
		},
		"ref-modifier": {
			"name": "storage.modifier.ref.cs",
			"match": "\\bref\\b"
		},
		"readonly-modifier": {
			"name": "storage.modifier.readonly.cs",
			"match": "\\breadonly\\b"
		},
		"type-builtin": {
			"match": "\\b(bool|s?byte|u?short|n?u?int|u?long|float|double|decimal|char|string|object|void|dynamic)\\b",
			"captures": {
				"1": {
					"name": "keyword.type.$1.cs"
				}
			}
		},
		"type-name": {
			"patterns": [
				{
					"match": "(@?[_[:alpha:]][_[:alnum:]]*)\\s*(\\:\\:)",
					"captures": {
						"1": {
							"name": "entity.name.type.alias.cs"
						},
						"2": {
							"name": "punctuation.separator.coloncolon.cs"
						}
					}
				},
				{
					"match": "(@?[_[:alpha:]][_[:alnum:]]*)\\s*(\\.)",
					"captures": {
						"1": {
							"name": "entity.name.type.cs"
						},
						"2": {
							"name": "punctuation.accessor.cs"
						}
					}
				},
				{
					"match": "(\\.)\\s*(@?[_[:alpha:]][_[:alnum:]]*)",
					"captures": {
						"1": {
							"name": "punctuation.accessor.cs"
						},
						"2": {
							"name": "entity.name.type.cs"
						}
					}
				},
				{
					"name": "entity.name.type.cs",
					"match": "@?[_[:alpha:]][_[:alnum:]]*"
				}
			]
		},
		"type-arguments": {
			"begin": "<",
			"beginCaptures": {
				"0": {
					"name": "punctuation.definition.typeparameters.begin.cs"
				}
			},
			"end": ">",
			"endCaptures": {
				"0": {
					"name": "punctuation.definition.typeparameters.end.cs"
				}
			},
			"patterns": [
				{
					"include": "#type"
				},
				{
					"include": "#punctuation-comma"
				}
			]
		},
		"type-array-suffix": {
			"begin": "\\[",
			"beginCaptures": {
				"0": {
					"name": "punctuation.squarebracket.open.cs"
				}
			},
			"end": "\\]",
			"endCaptures": {
				"0": {
					"name": "punctuation.squarebracket.close.cs"
				}
			},
			"patterns": [
				{
					"include": "#intrusive"
				},
				{
					"include": "#punctuation-comma"
				}
			]
		},
		"type-nullable-suffix": {
			"match": "\\?",
			"name": "punctuation.separator.question-mark.cs"
		},
		"type-pointer-suffix": {
			"match": "\\*",
			"name": "punctuation.separator.asterisk.cs"
		},
		"operator-assignment": {
			"name": "keyword.operator.assignment.cs",
			"match": "(?<!=|!)(=)(?!=)"
		},
		"punctuation-comma": {
			"name": "punctuation.separator.comma.cs",
			"match": ","
		},
		"punctuation-semicolon": {
			"name": "punctuation.terminator.statement.cs",
			"match": ";"
		},
		"punctuation-accessor": {
			"name": "punctuation.accessor.cs",
			"match": "\\."
		},
		"intrusive": {
			"patterns": [
				{
					"include": "#preprocessor"
				},
				{
					"include": "#comment"
				}
			]
		},
		"preprocessor": {
			"name": "meta.preprocessor.cs",
			"begin": "^\\s*(\\#)\\s*",
			"beginCaptures": {
				"1": {
					"name": "punctuation.separator.hash.cs"
				}
			},
			"end": "(?<=$)",
			"patterns": [
				{
					"include": "#comment"
				},
				{
					"include": "#preprocessor-define-or-undef"
				},
				{
					"include": "#preprocessor-if-or-elif"
				},
				{
					"include": "#preprocessor-else-or-endif"
				},
				{
					"include": "#preprocessor-warning-or-error"
				},
				{
					"include": "#preprocessor-include"
				},
				{
					"include": "#preprocessor-r"
				},
				{
					"include": "#preprocessor-line"
				}
			]
		},
		"preprocessor-define-or-undef": {
			"match": "\\b(?:(define)|(undef))\\b\\s*\\b([_[:alpha:]][_[:alnum:]]*)\\b",
			"captures": {
				"1": {
					"name": "keyword.preprocessor.define.cs"
				},
				"2": {
					"name": "keyword.preprocessor.undef.cs"
				},
				"3": {
					"name": "entity.name.variable.preprocessor.symbol.cs"
				}
			}
		},
		"preprocessor-if-or-elif": {
			"begin": "\\b(?:(if)|(elif))\\b",
			"beginCaptures": {
				"1": {
					"name": "keyword.preprocessor.if.cs"
				},
				"2": {
					"name": "keyword.preprocessor.elif.cs"
				}
			},
			"end": "(?=$)",
			"patterns": [
				{
					"include": "#comment"
				},
				{
					"include": "#preprocessor-expression"
				}
			]
		},
		"preprocessor-else-or-endif": {
			"match": "\\b(?:(else)|(endif))\\b",
			"captures": {
				"1": {
					"name": "keyword.preprocessor.else.cs"
				},
				"2": {
					"name": "keyword.preprocessor.endif.cs"
				}
			}
		},
		"preprocessor-warning-or-error": {
			"match": "\\b(?:(warning)|(error))\\b\\s*(.*)(?=$)",
			"captures": {
				"1": {
					"name": "keyword.preprocessor.warning.cs"
				},
				"2": {
					"name": "keyword.preprocessor.error.cs"
				},
				"3": {
					"name": "string.unquoted.preprocessor.message.cs"
				}
			}
		},
		"preprocessor-include": {
			"begin": "\\b(include)\\b",
			"beginCaptures": {
				"1": {
					"name": "keyword.preprocessor.include.cs"
				}
			},
			"end": "(?=$)",
			"patterns": [
				{
					"match": "\\\"[^\"]*\\\"",
					"captures": {
						"0": {
							"name": "string.quoted.double.cs"
						}
					}
				}
			]
		},
		"preprocessor-r": {
			"begin": "\\b(r)\\b",
			"beginCaptures": {
				"1": {
					"name": "keyword.preprocessor.r.cs"
				}
			},
			"end": "(?=$)",
			"patterns": [
				{
					"match": "\\\"[^\"]*\\\"",
					"captures": {
						"0": {
							"name": "string.quoted.double.cs"
						}
					}
				}
			]
		},
		"preprocessor-line": {
			"begin": "\\b(line)\\b",
			"beginCaptures": {
				"1": {
					"name": "keyword.preprocessor.line.cs"
				}
			},
			"end": "(?=$)",
			"patterns": [
				{
					"match": "\\b(?:(default|hidden))",
					"captures": {
						"1": {
							"name": "keyword.preprocessor.default.cs"
						},
						"2": {
							"name": "keyword.preprocessor.hidden.cs"
						}
					}
				},
				{
					"match": "[0-9]+",
					"captures": {
						"0": {
							"name": "constant.numeric.decimal.cs"
						}
					}
				},
				{
					"match": "\\\"[^\"]*\\\"",
					"captures": {
						"0": {
							"name": "string.quoted.double.cs"
						}
					}
				}
			]
		},
		"preprocessor-expression": {
			"patterns": [
				{
					"begin": "\\(",
					"beginCaptures": {
						"0": {
							"name": "punctuation.parenthesis.open.cs"
						}
					},
					"end": "\\)",
					"endCaptures": {
						"0": {
							"name": "punctuation.parenthesis.close.cs"
						}
					},
					"patterns": [
						{
							"include": "#preprocessor-expression"
						}
					]
				},
				{
					"match": "\\b(?:(true)|(false)|([_[:alpha:]][_[:alnum:]]*))\\b",
					"captures": {
						"1": {
							"name": "constant.language.boolean.true.cs"
						},
						"2": {
							"name": "constant.language.boolean.false.cs"
						},
						"3": {
							"name": "entity.name.variable.preprocessor.symbol.cs"
						}
					}
				},
				{
					"match": "(==|!=)|(\\!|&&|\\|\\|)",
					"captures": {
						"1": {
							"name": "keyword.operator.comparison.cs"
						},
						"2": {
							"name": "keyword.operator.logical.cs"
						}
					}
				}
			]
		},
		"comment": {
			"patterns": [
				{
					"name": "comment.block.documentation.cs",
					"begin": "(^\\s+)?(///)(?!/)",
					"while": "^(\\s*)(///)(?!/)",
					"captures": {
						"1": {
							"name": "punctuation.whitespace.comment.leading.cs"
						},
						"2": {
							"name": "punctuation.definition.comment.cs"
						}
					},
					"patterns": [
						{
							"include": "#xml-doc-comment"
						}
					]
				},
				{
					"name": "comment.block.documentation.cs",
					"begin": "(^\\s+)?(/\\*\\*)(?!/)",
					"end": "(^\\s+)?(\\*/)",
					"captures": {
						"1": {
							"name": "punctuation.whitespace.comment.leading.cs"
						},
						"2": {
							"name": "punctuation.definition.comment.cs"
						}
					},
					"patterns": [
						{
							"begin": "\\G(?=(?~\\*/)$)",
							"while": "^(\\s*+)(\\*(?!/))?(?=(?~\\*/)$)",
							"whileCaptures": {
								"1": {
									"name": "punctuation.whitespace.comment.leading.cs"
								},
								"2": {
									"name": "punctuation.definition.comment.cs"
								}
							},
							"patterns": [
								{
									"include": "#xml-doc-comment"
								}
							]
						},
						{
							"include": "#xml-doc-comment"
						}
					]
				},
				{
					"name": "comment.line.double-slash.cs",
					"begin": "(^\\s+)?(//).*$",
					"while": "^(\\s*)(//).*$",
					"captures": {
						"1": {
							"name": "punctuation.whitespace.comment.leading.cs"
						},
						"2": {
							"name": "punctuation.definition.comment.cs"
						}
					}
				},
				{
					"name": "comment.block.cs",
					"begin": "/\\*",
					"end": "\\*/",
					"captures": {
						"0": {
							"name": "punctuation.definition.comment.cs"
						}
					}
				}
			]
		},
		"xml-doc-comment": {
			"patterns": [
				{
					"include": "#xml-comment"
				},
				{
					"include": "#xml-character-entity"
				},
				{
					"include": "#xml-cdata"
				},
				{
					"include": "#xml-tag"
				}
			]
		},
		"xml-tag": {
			"name": "meta.tag.cs",
			"begin": "(?x)\n(</?)\n(\n  (?:\n    ([-_[:alnum:]]+)\n    (:)\n  )?\n  ([-_[:alnum:]]+)\n)",
			"beginCaptures": {
				"1": {
					"name": "punctuation.definition.tag.cs"
				},
				"2": {
					"name": "entity.name.tag.cs"
				},
				"3": {
					"name": "entity.name.tag.namespace.cs"
				},
				"4": {
					"name": "punctuation.separator.colon.cs"
				},
				"5": {
					"name": "entity.name.tag.localname.cs"
				}
			},
			"end": "(/?>)",
			"endCaptures": {
				"1": {
					"name": "punctuation.definition.tag.cs"
				}
			},
			"patterns": [
				{
					"include": "#xml-attribute"
				}
			]
		},
		"xml-attribute": {
			"patterns": [
				{
					"match": "(?x)\n(?:^|\\s+)\n(\n  (?:\n    ([-_[:alnum:]]+)\n    (:)\n  )?\n  ([-_[:alnum:]]+)\n)\n(=)",
					"captures": {
						"1": {
							"name": "entity.other.attribute-name.cs"
						},
						"2": {
							"name": "entity.other.attribute-name.namespace.cs"
						},
						"3": {
							"name": "punctuation.separator.colon.cs"
						},
						"4": {
							"name": "entity.other.attribute-name.localname.cs"
						},
						"5": {
							"name": "punctuation.separator.equals.cs"
						}
					}
				},
				{
					"include": "#xml-string"
				}
			]
		},
		"xml-cdata": {
			"name": "string.unquoted.cdata.cs",
			"begin": "<!\\[CDATA\\[",
			"beginCaptures": {
				"0": {
					"name": "punctuation.definition.string.begin.cs"
				}
			},
			"end": "\\]\\]>",
			"endCaptures": {
				"0": {
					"name": "punctuation.definition.string.end.cs"
				}
			}
		},
		"xml-string": {
			"patterns": [
				{
					"name": "string.quoted.single.cs",
					"begin": "\\'",
					"beginCaptures": {
						"0": {
							"name": "punctuation.definition.string.begin.cs"
						}
					},
					"end": "\\'",
					"endCaptures": {
						"0": {
							"name": "punctuation.definition.string.end.cs"
						}
					},
					"patterns": [
						{
							"include": "#xml-character-entity"
						}
					]
				},
				{
					"name": "string.quoted.double.cs",
					"begin": "\\\"",
					"beginCaptures": {
						"0": {
							"name": "punctuation.definition.string.begin.cs"
						}
					},
					"end": "\\\"",
					"endCaptures": {
						"0": {
							"name": "punctuation.definition.string.end.cs"
						}
					},
					"patterns": [
						{
							"include": "#xml-character-entity"
						}
					]
				}
			]
		},
		"xml-character-entity": {
			"patterns": [
				{
					"name": "constant.character.entity.cs",
					"match": "(?x)\n(&)\n(\n  (?:[[:alpha:]:_][[:alnum:]:_.-]*)|\n  (?:\\#[[:digit:]]+)|\n  (?:\\#x[[:xdigit:]]+)\n)\n(;)",
					"captures": {
						"1": {
							"name": "punctuation.definition.constant.cs"
						},
						"3": {
							"name": "punctuation.definition.constant.cs"
						}
					}
				},
				{
					"name": "invalid.illegal.bad-ampersand.cs",
					"match": "&"
				}
			]
		},
		"xml-comment": {
			"name": "comment.block.cs",
			"begin": "<!--",
			"beginCaptures": {
				"0": {
					"name": "punctuation.definition.comment.cs"
				}
			},
			"end": "-->",
			"endCaptures": {
				"0": {
					"name": "punctuation.definition.comment.cs"
				}
			}
		}
	}
}